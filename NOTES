





+x bustin && ./bustin 4790 7cb98000 | grep FOUND
opening: /proc/4790/as
ptaddr: 7cb98000
DUMP ffff880037800000 --> ffff880037a00000 (200000)
FOUND jbd2/vda1-8 @ ffff8800378409a0
DUMP ffff880037bf6000 --> ffff880037bf7000 (1000)
FOUND jbd2/vda1-8 @ ffff880037bf6cae
DUMP ffff88007c800000 --> ffff88007ca00000 (200000)
FOUND jbd2/vda1-8 @ ffff88007c993d8f




I ffff880037840900:  00  00  00  00  00  00  00  00   ........
I ffff880037840908:  8f  d2  00  00  00  00  00  00   ........
I ffff880037840910:  00  00  00  00  00  00  00  00   ........

maybe
1183	struct timespec start_time; 		/* monotonic time */
I ffff880037840918:  07  00  00  00  00  00  00  00   ........
I ffff880037840920:  57  66  07  08  00  00  00  00   Wf......

maybe
1184	struct timespec real_start_time;	/* boot based time */
I ffff880037840928:  07  00  00  00  00  00  00  00   ........
I ffff880037840930:  57  66  07  08  00  00  00  00   Wf......

I ffff880037840938:  00  00  00  00  00  00  00  00   ........
I ffff880037840940:  00  00  00  00  00  00  00  00   ........

I ffff880037840948:  00  00  00  00  00  00  00  00   ........
I ffff880037840950:  00  00  00  00  00  00  00  00   ........
I ffff880037840958:  00  00  00  00  00  00  00  00   ........

1189	struct list_head cpu_timers[1/3];
I ffff880037840960:  60  09  84  37  00  88  ff  ff   ...7....
I ffff880037840968:  60  09  84  37  00  88  ff  ff   ...7....

1189	struct list_head cpu_timers[2/3];
I ffff880037840970:  70  09  84  37  00  88  ff  ff   p..7....
I ffff880037840978:  70  09  84  37  00  88  ff  ff   p..7....

1189	struct list_head cpu_timers[3];
I ffff880037840980:  80  09  84  37  00  88  ff  ff   ...7....
I ffff880037840988:  80  09  84  37  00  88  ff  ff   ...7....

 ^^ ALL OF THESE LISTS ARE EMPTY, AS THEY POINT TO THEMSELVES,
    WHICH ALSO TELLS US THIS IS THE "CORRECT" PLACE FOR THIS
    STRUCT IN MEMORY

const struct cred __rcu *real_cred;
I ffff880037840990:  00  39  df  7b  00  88  ff  ff   .9......

const struct cred __rcu *cred;
I ffff880037840998:  00  39  df  7b  00  88  ff  ff   .9......

char comm[TASK_COMM_LEN];
I ffff8800378409a0:  6a  62  64  32  2f  76  64  61   jbd2.vda
I ffff8800378409a8:  31  2d  38  00  00  00  00  00   1.8.....

I ffff8800378409b0:  00  00  00  00  00  00  00  00   ........
I ffff8800378409b8:  00  00  00  00  00  00  00  00   ........
I ffff8800378409c0:  00  00  00  00  00  00  00  00   ........
I ffff8800378409c8:  00  00  00  00  00  00  00  00   ........
I ffff8800378409d0:  00  00  00  00  00  00  00  00   ........
I ffff8800378409d8:  00  60  d2  7b  00  88  ff  ff   ........
I ffff8800378409e0:  d8  5d  d2  7b  00  88  ff  ff   ........
I ffff8800378409e8:  00  00  00  00  00  00  00  00   ........
I ffff8800378409f0:  00  00  00  00  00  00  00  00   ........
I ffff8800378409f8:  00  00  00  00  00  00  00  00   ........



ff  ff 88  00  7b  df  39  00




ffff880000000000 - ffffc7ffffffffff (=64 TB) direct mapping of all phys. memory


w.t.f. they use the identity map for fucking allocations?!




http://src.illumos.org/source/xref/linux-master/include/linux/sched.h#1042


1192	const struct cred __rcu *real_cred; /* objective and real subjective task
1193					 * credentials (COW) */
1194	const struct cred __rcu *cred;	/* effective (overridable) subjective task
1195					 * credentials (COW) */
1196	char comm[TASK_COMM_LEN]; /* executable name excluding path
1197				     - access with [gs]et_task_comm (which lock
1198				       it with task_lock())
1199				     - initialized normally by setup_new_exec */


17struct list_head {
18	struct list_head *next, *prev;
19};









FOUND kthreadd @ ffff88000165282e (phys 000000000165282e)
FOUND kthreadd @ ffff880037bc0c7a (phys 0000000037bc0c7a)
FOUND kthreadd @ ffff880037bc0c95 (phys 0000000037bc0c95)
FOUND kthreadd @ ffff8800564d4421 (phys 00000000564d4421)
FOUND kthreadd @ ffff8800564d4621 (phys 00000000564d4621)
FOUND kthreadd @ ffff8800570372a4 (phys 00000000570372a4)
FOUND kthreadd @ ffff8800579a301f (phys 00000000579a301f)
FOUND kthreadd @ ffff880057ceed01 (phys 0000000057ceed01)
FOUND kthreadd @ ffff880058f0011a (phys 0000000058f0011a)
FOUND kthreadd @ ffff8800593b401f (phys 00000000593b401f)
FOUND kthreadd @ ffff880059a4a1a1 (phys 0000000059a4a1a1)
FOUND kthreadd @ ffff88005a05a410 (phys 000000005a05a410)
FOUND kthreadd @ ffff88005a4b86d0 (phys 000000005a4b86d0)
FOUND kthreadd @ ffff88005a77d011 (phys 000000005a77d011)
FOUND kthreadd @ ffff88005d80804b (phys 000000005d80804b)
FOUND kthreadd @ ffff88005d83cd88 (phys 000000005d83cd88)
FOUND kthreadd @ ffff88005d851008 (phys 000000005d851008)
FOUND kthreadd @ ffff88005ef508c4 (phys 000000005ef508c4)
FOUND kthreadd @ ffff88006a74981a (phys 000000006a74981a)
FOUND kthreadd @ ffff880073343013 (phys 0000000073343013)
FOUND kthreadd @ ffff88007c52d8d5 (phys 000000007c52d8d5)
FOUND kthreadd @ ffff88007c993043 (phys 000000007c993043)
FOUND kthreadd @ ffff88007c99305e (phys 000000007c99305e)
FOUND kthreadd @ ffff88007c993bd9 (phys 000000007c993bd9)
FOUND kthreadd @ ffff88007c996080 (phys 000000007c996080)
FOUND kthreadd @ ffff88007cb8501f (phys 000000007cb8501f)
FOUND kthreadd @ ffff88007d3449a0 (phys 000000007d3449a0)
FOUND kthreadd @ ffffffff8165282e (phys 000000000165282e)




I ffff88007d344778:  20  00  00  00  00  00  00  00   ........
I ffff88007d344780:  ff  ff  ff  ff  00  00  00  00   ........
I ffff88007d344788:  c8  4d  34  7d  00  88  ff  ff   .M4.....
I ffff88007d344790:  48  41  34  7d  00  88  ff  ff   HA4.....
I ffff88007d344798:  8c  00  00  00  00  00  00  00   ........
I ffff88007d3447a0:  a0  47  34  7d  00  88  ff  ff   .G4.....
I ffff88007d3447a8:  a0  47  34  7d  00  88  ff  ff   .G4.....
I ffff88007d3447b0:  b0  47  34  7d  00  88  ff  ff   .G4.....
I ffff88007d3447b8:  b0  47  34  7d  00  88  ff  ff   .G4.....
I ffff88007d3447c0:  00  00  00  00  00  00  00  00   ........
I ffff88007d3447c8:  00  00  00  00  00  00  00  00   ........
I ffff88007d3447d0:  00  00  00  00  00  00  00  00   ........
I ffff88007d3447d8:  00  00  00  00  00  00  00  00   ........
I ffff88007d3447e0:  00  00  00  00  00  00  00  00   ........
I ffff88007d3447e8:  00  00  00  00  00  00  00  00   ........
I ffff88007d3447f0:  00  00  00  00  00  00  00  00   ........

pid and thread group id?
I ffff88007d3447f8:  00  00  00  00  02  00  00  00   ........
I ffff88007d344800:  02  00  00  00  00  00  00  00   ........

I ffff88007d344808:  40  74  6f  81  ff  ff  ff  ff   .to.....
I ffff88007d344810:  40  74  6f  81  ff  ff  ff  ff   .to.....
I ffff88007d344818:  68  4e  34  7d  00  88  ff  ff   hN4.....
I ffff88007d344820:  28  a1  01  78  00  88  ff  ff   ...x....
I ffff88007d344828:  18  76  6f  81  ff  ff  ff  ff   .vo.....
I ffff88007d344830:  e8  41  34  7d  00  88  ff  ff   .A4.....
I ffff88007d344838:  40  46  34  7d  00  88  ff  ff   .F4.....
I ffff88007d344840:  40  48  34  7d  00  88  ff  ff   .H4.....
I ffff88007d344848:  40  48  34  7d  00  88  ff  ff   .H4.....
I ffff88007d344850:  50  48  34  7d  00  88  ff  ff   PH4.....
I ffff88007d344858:  50  48  34  7d  00  88  ff  ff   PH4.....
I ffff88007d344860:  00  00  00  00  00  00  00  00   ........
I ffff88007d344868:  88  c7  00  7d  00  88  ff  ff   ........
I ffff88007d344870:  80  c7  00  7d  00  88  ff  ff   ........
I ffff88007d344878:  00  00  00  00  00  00  00  00   ........
I ffff88007d344880:  b8  4e  34  7d  00  88  ff  ff   .N4.....
I ffff88007d344888:  40  5e  70  81  ff  ff  ff  ff   ..p.....
I ffff88007d344890:  00  00  00  00  00  00  00  00   ........
I ffff88007d344898:  d0  4e  34  7d  00  88  ff  ff   .N4.....
I ffff88007d3448a0:  40  5e  70  81  ff  ff  ff  ff   ..p.....
I ffff88007d3448a8:  a8  48  34  7d  00  88  ff  ff   .H4.....
I ffff88007d3448b0:  a8  48  34  7d  00  88  ff  ff   .H4.....
I ffff88007d3448b8:  00  00  00  00  00  00  00  00   ........
I ffff88007d3448c0:  00  00  00  00  00  00  00  00   ........
I ffff88007d3448c8:  00  00  00  00  00  00  00  00   ........
I ffff88007d3448d0:  00  00  00  00  00  00  00  00   ........
I ffff88007d3448d8:  00  00  00  00  00  00  00  00   ........
I ffff88007d3448e0:  00  00  00  00  00  00  00  00   ........
I ffff88007d3448e8:  00  00  00  00  00  00  00  00   ........
I ffff88007d3448f0:  00  00  00  00  00  00  00  00   ........
I ffff88007d3448f8:  00  00  00  00  00  00  00  00   ........
I ffff88007d344900:  00  00  00  00  00  00  00  00   ........
I ffff88007d344908:  4d  00  00  00  00  00  00  00   M.......
I ffff88007d344910:  00  00  00  00  00  00  00  00   ........
I ffff88007d344918:  00  00  00  00  00  00  00  00   ........
I ffff88007d344920:  00  b4  c4  04  00  00  00  00   ........
I ffff88007d344928:  00  00  00  00  00  00  00  00   ........
I ffff88007d344930:  00  b4  c4  04  00  00  00  00   ........
I ffff88007d344938:  00  00  00  00  00  00  00  00   ........
I ffff88007d344940:  00  00  00  00  00  00  00  00   ........
I ffff88007d344948:  00  00  00  00  00  00  00  00   ........
I ffff88007d344950:  00  00  00  00  00  00  00  00   ........
I ffff88007d344958:  00  00  00  00  00  00  00  00   ........
I ffff88007d344960:  60  49  34  7d  00  88  ff  ff   .I4.....
I ffff88007d344968:  60  49  34  7d  00  88  ff  ff   .I4.....
I ffff88007d344970:  70  49  34  7d  00  88  ff  ff   pI4.....
I ffff88007d344978:  70  49  34  7d  00  88  ff  ff   pI4.....
I ffff88007d344980:  80  49  34  7d  00  88  ff  ff   .I4.....
I ffff88007d344988:  80  49  34  7d  00  88  ff  ff   .I4.....
I ffff88007d344990:  c0  10  33  7d  00  88  ff  ff   ..3.....
I ffff88007d344998:  c0  10  33  7d  00  88  ff  ff   ..3.....

comm[16]
I ffff88007d3449a0:  6b  74  68  72  65  61  64  64   kthreadd
I ffff88007d3449a8:  00  00  00  00  00  00  00  00   ........





FOUND comm "kthreadd" @ ffff88007d3449a0
FOUND cred == real_cred @ ffff88007d3449a0
FOUND expected pid @ ffff88007d344800 (1a0)
FOUND comm "init" @ ffff88007d344360
FOUND cred == real_cred @ ffff88007d344360
FOUND expected pid @ ffff88007d3441c0 (1a0)










1103	struct mm_struct *mm, *active_mm;
1104#ifdef CONFIG_COMPAT_BRK
1105	unsigned brk_randomized:1;
1106#endif
1107#if defined(SPLIT_RSS_COUNTING)
1108	struct task_rss_stat	rss_stat;
1109#endif
1110/* task state */
1111	int exit_state;
1112	int exit_code, exit_signal;
1113	int pdeath_signal;  /*  The signal sent when the parent dies  */
1114	unsigned int jobctl;	/* JOBCTL_*, siglock protected */
1115
1116	/* Used for emulating ABI behavior of previous Linux versions */
1117	unsigned int personality;
1118
1119	unsigned did_exec:1;
1120	unsigned in_execve:1;	/* Tell the LSMs that the process is doing an
1121				 * execve */
1122	unsigned in_iowait:1;
1123
1124	/* task may not gain privileges */
1125	unsigned no_new_privs:1;
1126
1127	/* Revert to default priority/policy when forking */
1128	unsigned sched_reset_on_fork:1;
1129	unsigned sched_contributes_to_load:1;
1130
1131	pid_t pid;
1132	pid_t tgid;
1133
1134#ifdef CONFIG_CC_STACKPROTECTOR
1135	/* Canary value for the -fstack-protector gcc feature */
1136	unsigned long stack_canary;
1137#endif
1138	/*
1139	 * pointers to (original) parent process, youngest child, younger sibling,
1140	 * older sibling, respectively.  (p->father can be replaced with
1141	 * p->real_parent->pid)
1142	 */
1143	struct task_struct __rcu *real_parent; /* real parent process */
1144	struct task_struct __rcu *parent; /* recipient of SIGCHLD, wait4() reports */
1145	/*
1146	 * children/sibling forms the list of my natural children
1147	 */
1148	struct list_head children;	/* list of my children */
1149	struct list_head sibling;	/* linkage in my parent's children list */
1150	struct task_struct *group_leader;	/* threadgroup leader */
1151
1152	/*
1153	 * ptraced is the list of tasks this task is using ptrace on.
1154	 * This includes both natural children and PTRACE_ATTACH targets.
1155	 * p->ptrace_entry is p's link on the p->parent->ptraced list.
1156	 */
1157	struct list_head ptraced;
1158	struct list_head ptrace_entry;
1159
1160	/* PID/PID hash table linkage. */
1161	struct pid_link pids[PIDTYPE_MAX];
1162	struct list_head thread_group;
1163
1164	struct completion *vfork_done;		/* for vfork() */
1165	int __user *set_child_tid;		/* CLONE_CHILD_SETTID */
1166	int __user *clear_child_tid;		/* CLONE_CHILD_CLEARTID */
1167
1168	cputime_t utime, stime, utimescaled, stimescaled;
1169	cputime_t gtime;
1170#ifndef CONFIG_VIRT_CPU_ACCOUNTING_NATIVE
1171	struct cputime prev_cputime;
1172#endif
1173#ifdef CONFIG_VIRT_CPU_ACCOUNTING_GEN
1174	seqlock_t vtime_seqlock;
1175	unsigned long long vtime_snap;
1176	enum {
1177		VTIME_SLEEPING = 0,
1178		VTIME_USER,
1179		VTIME_SYS,
1180	} vtime_snap_whence;
1181#endif
1182	unsigned long nvcsw, nivcsw; /* context switch counts */
1183	struct timespec start_time; 		/* monotonic time */
1184	struct timespec real_start_time;	/* boot based time */
1185/* mm fault and swap info: this can arguably be seen as either mm-specific or thread-specific */


9struct timespec {
10	__kernel_time_t	tv_sec;			/* seconds */
11	long		tv_nsec;		/* nanoseconds */
12};

6enum pid_type
7{
8	PIDTYPE_PID,
9	PIDTYPE_PGID,
10	PIDTYPE_SID,
11	PIDTYPE_MAX
12};

69struct pid_link
70{
71	struct hlist_node node;
72	struct pid *pid;
73};
74

struct hlist_node {
194	struct hlist_node *next, **pprev;
195};






PHASE2:
PHASE2: comm      kthreadd
PHASE2: pid       2
PHASE2: addr comm ffff88007d3449a0
PHASE2: addr pid  ffff88007d3447fc
PHASE2: DUMP ffff88007d3447fc (1b4)
PHASE2: ffff88007d3447f8:  00  00  00  00  02  00  00  00   ........
PHASE2: ffff88007d344800:  02  00  00  00  00  00  00  00   ........

1143    struct task_struct __rcu *real_parent; /* real parent process */
PHASE2: ffff88007d344808:  40  74  6f  81  ff  ff  ff  ff   .to.....
1144    struct task_struct __rcu *parent; /* recipient of SIGCHLD, wait4() reports
PHASE2: ffff88007d344810:  40  74  6f  81  ff  ff  ff  ff   .to.....

  ^----- pointing to the "init_task" symbol, in a loaded data area,
          the "swapper" task

1148    struct list_head children;      /* list of my children */
PHASE2: ffff88007d344818:  68  4e  34  7d  00  88  ff  ff   hN4.....
PHASE2: ffff88007d344820:  e8  01  36  7c  00  88  ff  ff   ..6.....

1149    struct list_head sibling;       /* linkage in my parent's children list */
PHASE2: ffff88007d344828:  18  76  6f  81  ff  ff  ff  ff   .vo.....
PHASE2: ffff88007d344830:  e8  41  34  7d  00  88  ff  ff   .A4.....

1150    struct task_struct *group_leader;       /* threadgroup leader */
PHASE2: ffff88007d344838:  40  46  34  7d  00  88  ff  ff   .F4.....

    ^----- is this us?

1157    struct list_head ptraced;
PHASE2: ffff88007d344840:  40  48  34  7d  00  88  ff  ff   .H4.....
PHASE2: ffff88007d344848:  40  48  34  7d  00  88  ff  ff   .H4.....

1158    struct list_head ptrace_entry;
PHASE2: ffff88007d344850:  50  48  34  7d  00  88  ff  ff   PH4.....
PHASE2: ffff88007d344858:  50  48  34  7d  00  88  ff  ff   PH4.....

PHASE2: ffff88007d344860:  00  00  00  00  00  00  00  00   ........
PHASE2: ffff88007d344868:  88  c7  00  7d  00  88  ff  ff   ........
PHASE2: ffff88007d344870:  80  c7  00  7d  00  88  ff  ff   ........
PHASE2: ffff88007d344878:  00  00  00  00  00  00  00  00   ........
PHASE2: ffff88007d344880:  b8  4e  34  7d  00  88  ff  ff   .N4.....
PHASE2: ffff88007d344888:  40  5e  70  81  ff  ff  ff  ff   ..p.....
PHASE2: ffff88007d344890:  00  00  00  00  00  00  00  00   ........
PHASE2: ffff88007d344898:  d0  4e  34  7d  00  88  ff  ff   .N4.....
PHASE2: ffff88007d3448a0:  40  5e  70  81  ff  ff  ff  ff   ..p.....

?

1162    struct list_head thread_group;
PHASE2: ffff88007d3448a8:  a8  48  34  7d  00  88  ff  ff   .H4.....
PHASE2: ffff88007d3448b0:  a8  48  34  7d  00  88  ff  ff   .H4.....
PHASE2: ffff88007d3448b8:  00  00  00  00  00  00  00  00   ........
PHASE2: ffff88007d3448c0:  00  00  00  00  00  00  00  00   ........
PHASE2: ffff88007d3448c8:  00  00  00  00  00  00  00  00   ........
PHASE2: ffff88007d3448d0:  00  00  00  00  00  00  00  00   ........
PHASE2: ffff88007d3448d8:  00  00  00  00  00  00  00  00   ........
PHASE2: ffff88007d3448e0:  00  00  00  00  00  00  00  00   ........
PHASE2: ffff88007d3448e8:  00  00  00  00  00  00  00  00   ........
PHASE2: ffff88007d3448f0:  00  00  00  00  00  00  00  00   ........
PHASE2: ffff88007d3448f8:  00  00  00  00  00  00  00  00   ........
PHASE2: ffff88007d344900:  00  00  00  00  00  00  00  00   ........
PHASE2: ffff88007d344908:  53  00  00  00  00  00  00  00   S.......
PHASE2: ffff88007d344910:  00  00  00  00  00  00  00  00   ........
PHASE2: ffff88007d344918:  00  00  00  00  00  00  00  00   ........

1182	unsigned long nvcsw, nivcsw; /* context switch counts */
PHASE2: ffff88007d344920:  00  b4  c4  04  00  00  00  00   ........
PHASE2: ffff88007d344928:  00  00  00  00  00  00  00  00   ........

1183	struct timespec start_time; 		/* monotonic time */
PHASE2: ffff88007d344930:  00  b4  c4  04  00  00  00  00   ........
PHASE2: ffff88007d344938:  00  00  00  00  00  00  00  00   ........

1184	struct timespec real_start_time;	/* boot based time */
PHASE2: ffff88007d344940:  00  00  00  00  00  00  00  00   ........
PHASE2: ffff88007d344948:  00  00  00  00  00  00  00  00   ........

1186	unsigned long min_flt, maj_flt;
PHASE2: ffff88007d344950:  00  00  00  00  00  00  00  00   ........
PHASE2: ffff88007d344958:  00  00  00  00  00  00  00  00   ........

1189	struct list_head cpu_timers[3];
PHASE2: ffff88007d344960:  60  49  34  7d  00  88  ff  ff   .I4.....
PHASE2: ffff88007d344968:  60  49  34  7d  00  88  ff  ff   .I4.....
PHASE2: ffff88007d344970:  70  49  34  7d  00  88  ff  ff   pI4.....
PHASE2: ffff88007d344978:  70  49  34  7d  00  88  ff  ff   pI4.....
PHASE2: ffff88007d344980:  80  49  34  7d  00  88  ff  ff   .I4.....
PHASE2: ffff88007d344988:  80  49  34  7d  00  88  ff  ff   .I4.....

1192	const struct cred __rcu *real_cred; /* objective and real subjective task
PHASE2: ffff88007d344990:  c0  10  33  7d  00  88  ff  ff   ..3.....

1194	const struct cred __rcu *cred;	/* effective (overridable) subjective task
PHASE2: ffff88007d344998:  c0  10  33  7d  00  88  ff  ff   ..3.....

1196	char comm[TASK_COMM_LEN]; /* executable name excluding path
PHASE2: ffff88007d3449a0:  6b  74  68  72  65  61  64  64   kthreadd
PHASE2: ffff88007d3449a8:  00  00  00  00  00  00  00  00   ........
PHASE2: ffff88007d3449b0:
PHASE2: ffff88007d3449b8:





/*
    FISHING OUT ARGUMENTS */


203static int proc_pid_cmdline(struct task_struct *task, char * buffer)
204{
205	int res = 0;
206	unsigned int len;
207	struct mm_struct *mm = get_task_mm(task);
208	if (!mm)
209		goto out;
210	if (!mm->arg_end)
211		goto out_mm;	/* Shh! No looking before we're done */
212
213 	len = mm->arg_end - mm->arg_start;
214
215	if (len > PAGE_SIZE)
216		len = PAGE_SIZE;
217
218	res = access_process_vm(task, mm->arg_start, buffer, len, 0);
219
220	// If the nul at the end of args has been overwritten, then
221	// assume application is using setproctitle(3).
222	if (res > 0 && buffer[res-1] != '\0' && len < PAGE_SIZE) {
223		len = strnlen(buffer, res);
224		if (len < res) {
225		    res = len;
226		} else {
227			len = mm->env_end - mm->env_start;
228			if (len > PAGE_SIZE - res)
229				len = PAGE_SIZE - res;
230			res += access_process_vm(task, mm->env_start, buffer+res, len, 0);
231			res = strnlen(buffer, res);
232		}
233	}
234out_mm:
235	mmput(mm);
236out:
237	return res;
238}





